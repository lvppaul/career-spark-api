// <auto-generated />
using System;
using CareerSpark.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CareerSpark.DataAccessLayer.Migrations
{
    [DbContext(typeof(CareerSparkDbContext))]
    [Migration("20251009074245_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_Blogs");

                    b.HasIndex("AuthorId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id")
                        .HasName("PK_CareerField");

                    b.ToTable("CareerField", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CareerFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("RiasecType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("PK_CareerMapping");

                    b.HasIndex("CareerFieldId");

                    b.ToTable("CareerMapping", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CareerFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("PK_CareerPath");

                    b.HasIndex("CareerFieldId");

                    b.ToTable("CareerPath", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerRoadmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CareerPathId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("DurationWeeks")
                        .HasColumnType("integer");

                    b.Property<string>("SkillFocus")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestedCourseUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CareerPathId");

                    b.ToTable("CareerRoadmap", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_Comments");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VnPayOrderInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("VnPayResponseCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("VnPayTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("PK_Orders");

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.QuestionTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PK_QuestionTest");

                    b.ToTable("QuestionTest", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("A")
                        .HasColumnType("integer");

                    b.Property<int?>("C")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("E")
                        .HasColumnType("integer");

                    b.Property<int?>("I")
                        .HasColumnType("integer");

                    b.Property<int?>("R")
                        .HasColumnType("integer");

                    b.Property<int?>("S")
                        .HasColumnType("integer");

                    b.Property<int>("TestSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_Result");

                    b.HasIndex("TestSessionId");

                    b.ToTable("Result", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PK_Role");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PK_SubscriptionPlan");

                    b.ToTable("SubscriptionPlan", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.TestAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsSelected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("TestSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_TestAnswer");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestSessionId");

                    b.ToTable("TestAnswer", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.TestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TestAnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("TestSessionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_TestHistory");

                    b.HasIndex("TestAnswerId");

                    b.HasIndex("TestSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("TestHistory", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.TestSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("StartAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_TestSession");

                    b.HasIndex("UserId");

                    b.ToTable("TestSession", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ExpiredRefreshTokenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("avatarPublicId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("avatarURL")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ_User_Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_UserSubscription");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscription", (string)null);
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Blog", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerMapping", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.CareerField", "CareerField")
                        .WithMany("CareerMappings")
                        .HasForeignKey("CareerFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_CareerMapping_CareerField");

                    b.Navigation("CareerField");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerPath", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.CareerField", "CareerField")
                        .WithMany("CareerPaths")
                        .HasForeignKey("CareerFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_CareerPath_CareerField");

                    b.Navigation("CareerField");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerRoadmap", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.CareerPath", "CareerPath")
                        .WithMany("CareerRoadmaps")
                        .HasForeignKey("CareerPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerPath");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Comment", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Blog");

                    b.HasOne("CareerSpark.DataAccessLayer.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_User");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Order", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_SubscriptionPlan");

                    b.HasOne("CareerSpark.DataAccessLayer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_User");

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Result", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.TestSession", "TestSession")
                        .WithMany("Results")
                        .HasForeignKey("TestSessionId")
                        .IsRequired()
                        .HasConstraintName("FK_Result_TestSession");

                    b.Navigation("TestSession");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.TestAnswer", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.QuestionTest", "Question")
                        .WithMany("TestAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_TestAnswer_Question");

                    b.HasOne("CareerSpark.DataAccessLayer.Entities.TestSession", "TestSession")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestSessionId")
                        .IsRequired()
                        .HasConstraintName("FK_TestAnswer_TestSession");

                    b.Navigation("Question");

                    b.Navigation("TestSession");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.TestHistory", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.TestAnswer", "TestAnswer")
                        .WithMany("TestHistories")
                        .HasForeignKey("TestAnswerId")
                        .IsRequired()
                        .HasConstraintName("FK_TestHistory_TestAnswer");

                    b.HasOne("CareerSpark.DataAccessLayer.Entities.TestSession", "TestSession")
                        .WithMany("TestHistories")
                        .HasForeignKey("TestSessionId")
                        .IsRequired()
                        .HasConstraintName("FK_TestHistory_TestSession");

                    b.HasOne("CareerSpark.DataAccessLayer.Entities.User", "User")
                        .WithMany("TestHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TestHistory_User");

                    b.Navigation("TestAnswer");

                    b.Navigation("TestSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.TestSession", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.User", "User")
                        .WithMany("TestSessions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TestSession_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.User", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.UserSubscription", b =>
                {
                    b.HasOne("CareerSpark.DataAccessLayer.Entities.SubscriptionPlan", "Plan")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSubscription_Plan");

                    b.HasOne("CareerSpark.DataAccessLayer.Entities.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSubscription_User");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerField", b =>
                {
                    b.Navigation("CareerMappings");

                    b.Navigation("CareerPaths");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.CareerPath", b =>
                {
                    b.Navigation("CareerRoadmaps");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.QuestionTest", b =>
                {
                    b.Navigation("TestAnswers");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.TestAnswer", b =>
                {
                    b.Navigation("TestHistories");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.TestSession", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("TestAnswers");

                    b.Navigation("TestHistories");
                });

            modelBuilder.Entity("CareerSpark.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("TestHistories");

                    b.Navigation("TestSessions");

                    b.Navigation("UserSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
